package com.lrfc.designpattern.structural.bridging;

/**

 * Title:       [Learn — 设计模式]
 * Description: [桥接模式]
 * Created on   2019年06月26日
 * @author 来日方长
 * @version db.0
 */
public class packageInfo {
	/**
	 *
	 *  将抽象部分与它的具体实现部分分离，使他们都可以独立的变化
	 *  通过组合的方式建立两个类之间的关联，而不是继承
	 *  类型：
	 *      结构型
	 *
	 *
	 *  适用场景：
	 *      抽象和具体实现之间增加更多的灵活性
	 *      一个类存在两个或多个独立变化的维度，且这两个或多个维度都需要独立进行扩展
	 *      不希望使用继承，或因为多层继承导致系统类的个数剧增
	 *
	 *  优点：
	 *      分离抽象部分和具体实现部分
	 *      提高了系统的可扩展性
	 *      复合开闭原则
	 *      复合合成复用原则
	 *
	 *  缺点：
	 *      增加了系统的理解和设计难度
	 *      需要正确的识别系统中两个独立变化的维度
	 *
	 *  相关设计模式：
	 *      桥接模式和组合模式
	 *      桥接模式和适配器模式
	 *
	 *
	 */
}

